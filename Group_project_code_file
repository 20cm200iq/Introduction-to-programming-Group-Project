def organise_data(data):
    data = open(data, "r")
    dict1 = {}
    number = 0
    for i in data:
        if number == 0:
            number +=1
        else:
            line = i.strip().split(",")
            Home_team = line[1]
            Away_team = line[2]
            GH = line[3]
            GA = line[4]
            YH = line[5]
            YA = line[6]
            dict1[number] = [Home_team, Away_team, GH, GA, YH, YA]
            number += 1
        
    return dict1

# Calling for the organise_function and store the returning dict to the following three variables:
season_16_17 = organise_data("16_17_revised.csv")
season_17_18 = organise_data("17_18_revised.csv")
season_18_19 = organise_data("18_19_revised.csv")



def allocate_points_and_goaldiff(data, season):
  None
def construct_table(dict):
    points= {}
    for i in dict.keys():
        points[i]=dict[i][4]
    ls = points.values(); ls = list(ls);ls.sort(reverse=True)
    ranked_dict = {} 
    for i in ls: 
        for p in points:
            if i == points[p]:
                ranked_dict[p]=i
    equal_points = []
    for i in ranked_dict.keys():
        n = 0    
        for p in ls:
            if ranked_dict[i]==p:
                n+=1
        if n >=2:
            equal_points.append(i)
    if equal_points == []:
        return(ranked_dict)
    else:
        print("Warning: There are "+str(len(equal_points))+" teams that share the same amount of points with at least one other team")
        goal_diff = {}
        for i in equal_points:
            goal_diff[i] = dict2[i][5]
        gd = list(goal_diff.values())
        gd.sort(reverse=True)
        w_gd ={}
        for i in gd: 
            for p in goal_diff:
                if i == goal_diff[p]:
                    w_gd[p]=i
        n=0
        for i in w_gd:
            ranked_dict[i]+=n
            n-=0.01
        ls = ranked_dict.values(); ls = list(ls);ls.sort(reverse=True)
        new_ranked_dict={}
        for i in ls: 
            for p in ranked_dict:
                if i == ranked_dict[p]:
                    new_ranked_dict[p]=i
        for i in new_ranked_dict: 
            new_ranked_dict[i]=dict[i]
        return(new_ranked_dict)

def visualise_table():
	None
	
def test_table(data):
	None
